{"version":3,"file":"outputModels.js","sourceRoot":"","sources":["../../src/outputModels.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * An abstract representation of a tool call that must be resolved in a subsequent request to perform the requested\n * chat completion.\n */\nexport interface ChatCompletionsToolCallOutputParent {\n  /** The ID of the tool call. */\n  id: string;\n  type: string;\n}\n\n/**\n * A tool call to a function tool, issued by the model in evaluation of a configured function tool, that represents\n * a function invocation needed for a subsequent chat completions request to resolve.\n */\nexport interface ChatCompletionsFunctionToolCallOutput\n  extends ChatCompletionsToolCallOutputParent {\n  /** The type of tool call, in this case always 'function'. */\n  type: \"function\";\n  /** The details of the function invocation requested by the tool call. */\n  function: FunctionCallOutput;\n}\n\n/** The name and arguments of a function that should be called, as generated by the model. */\nexport interface FunctionCallOutput {\n  /** The name of the function to call. */\n  name: string;\n  /**\n   * The arguments to call the function with, as generated by the model in JSON format.\n   * Note that the model does not always generate valid JSON, and may hallucinate parameters\n   * not defined by your function schema. Validate the arguments in your code before calling\n   * your function.\n   */\n  arguments: string;\n}\n\n/**\n * Representation of the response data from a chat completions request.\n * Completions support a wide variety of tasks and generate text that continues from or \"completes\"\n * provided prompt data.\n */\nexport interface ChatCompletionsOutput {\n  /** A unique identifier associated with this chat completions response. */\n  id: string;\n  /**\n   * The first timestamp associated with generation activity for this completions response,\n   * represented as seconds since the beginning of the Unix epoch of 00:00 on 1 Jan 1970.\n   */\n  created: number;\n  /** The model used for the chat completion. */\n  model: string;\n  /** Usage information for tokens processed and generated as part of this completions operation. */\n  usage: CompletionsUsageOutput;\n  /**\n   * The collection of completions choices associated with this completions response.\n   * Generally, `n` choices are generated per provided prompt with a default value of 1.\n   * Token limits and other settings may limit the number of choices generated.\n   */\n  choices: Array<ChatChoiceOutput>;\n}\n\n/**\n * Representation of the token counts processed for a completions request.\n * Counts consider all tokens across prompts, choices, choice alternates, best_of generations, and\n * other consumers.\n */\nexport interface CompletionsUsageOutput {\n  /** The number of tokens generated across all completions emissions. */\n  completion_tokens: number;\n  /** The number of tokens in the provided prompts for the completions request. */\n  prompt_tokens: number;\n  /** The total number of tokens processed for the completions request and response. */\n  total_tokens: number;\n}\n\n/**\n * The representation of a single prompt completion as part of an overall chat completions request.\n * Generally, `n` choices are generated per provided prompt with a default value of 1.\n * Token limits and other settings may limit the number of choices generated.\n */\nexport interface ChatChoiceOutput {\n  /** The ordered index associated with this chat completions choice. */\n  index: number;\n  /** The reason that this chat completions choice completed its generated. */\n  finish_reason: CompletionsFinishReasonOutput | null;\n  /** The chat message for a given chat completions prompt. */\n  message: ChatResponseMessageOutput;\n}\n\n/** A representation of a chat message as received in a response. */\nexport interface ChatResponseMessageOutput {\n  /** The chat role associated with the message. */\n  role: ChatRoleOutput;\n  /** The content of the message. */\n  content: string | null;\n  /**\n   * The tool calls that must be resolved and have their outputs appended to subsequent input messages for the chat\n   * completions request to resolve as configured.\n   */\n  tool_calls?: Array<ChatCompletionsToolCallOutput>;\n}\n\n/** Represents some basic information about the AI model. */\nexport interface ModelInfoOutput {\n  /** The name of the AI model. For example: `Phi21` */\n  model_name: string;\n  /** The type of the AI model. A Unique identifier for the profile. */\n  model_type: ModelTypeOutput;\n  /** The model provider name. For example: `Microsoft Research` */\n  model_provider_name: string;\n}\n\n/**\n * Representation of the response data from an embeddings request.\n * Embeddings measure the relatedness of text strings and are commonly used for search, clustering,\n * recommendations, and other similar scenarios.\n */\nexport interface EmbeddingsResultOutput {\n  /** Unique identifier for the embeddings result. */\n  id: string;\n  /** Embedding values for the prompts submitted in the request. */\n  data: Array<EmbeddingItemOutput>;\n  /** Usage counts for tokens input using the embeddings API. */\n  usage: EmbeddingsUsageOutput;\n  /** The model ID used to generate this result. */\n  model: string;\n}\n\n/** Representation of a single embeddings relatedness comparison. */\nexport interface EmbeddingItemOutput {\n  /**\n   * List of embeddings value for the input prompt. These represent a measurement of the\n   * vector-based relatedness of the provided input.\n   */\n  embedding: number[];\n  /** Index of the prompt to which the EmbeddingItem corresponds. */\n  index: number;\n}\n\n/** Measurement of the amount of tokens used in this request and response. */\nexport interface EmbeddingsUsageOutput {\n  /** Number of tokens in the request. */\n  prompt_tokens: number;\n  /**\n   * Total number of tokens transacted in this request/response. Should equal the\n   * number of tokens in the request.\n   */\n  total_tokens: number;\n}\n\n/**\n * An abstract representation of a tool call that must be resolved in a subsequent request to perform the requested\n * chat completion.\n */\nexport type ChatCompletionsToolCallOutput =\n  | ChatCompletionsToolCallOutputParent\n  | ChatCompletionsFunctionToolCallOutput;\n/** Alias for ChatRoleOutput */\nexport type ChatRoleOutput = string;\n/** Alias for CompletionsFinishReasonOutput */\nexport type CompletionsFinishReasonOutput = string;\n/** Alias for ModelTypeOutput */\nexport type ModelTypeOutput = string;\n"]}